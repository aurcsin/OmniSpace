diff --git a/lib/main.dart b/lib/main.dart
index 896a037..fd6c73a 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -5,7 +5,9 @@ import 'package:hive_flutter/hive_flutter.dart';
 
 import 'models/omni_note.dart';
 import 'models/attachment.dart';
+import 'models/day_reflection.dart';
 import 'services/omni_note_service.dart';
+import 'services/day_reflection_service.dart';
 import 'pages/journal_page.dart';
 
 Future<void> main() async {
@@ -15,14 +17,19 @@ Future<void> main() async {
   // Initialize Hive and HiveFlutter
   await Hive.initFlutter();
 
-  // Register all generated adapters
-  Hive.registerAdapter(ZoneThemeAdapter());
-  Hive.registerAdapter(OmniNoteAdapter());
-  Hive.registerAdapter(AttachmentTypeAdapter());
-  Hive.registerAdapter(AttachmentAdapter());
+  // Register all generated adapters only once
+  void reg(int id, TypeAdapter adapter) {
+    if (!Hive.isAdapterRegistered(id)) Hive.registerAdapter(adapter);
+  }
+  reg(3, ZoneThemeAdapter());
+  reg(0, OmniNoteAdapter());
+  reg(1, AttachmentTypeAdapter());
+  reg(2, AttachmentAdapter());
+  reg(7, DayReflectionAdapter());
 
   // Open your notes box (or perform any other startup work)
   await OmniNoteService.instance.init();
+  await DayReflectionService.instance.init();
 
   // Run the app
   runApp(const MyApp());
diff --git a/lib/models/day_reflection.dart b/lib/models/day_reflection.dart
index aa8b146..20a5f61 100644
--- a/lib/models/day_reflection.dart
+++ b/lib/models/day_reflection.dart
@@ -2,7 +2,7 @@ import 'package:hive/hive.dart';
 
 part 'day_reflection.g.dart';
 
-@HiveType(typeId: 2)
+@HiveType(typeId: 7)
 class DayReflection extends HiveObject {
   @HiveField(0)
   String dateKey; // Format: yyyy-MM-dd
diff --git a/lib/pages/calendar_overview_page.dart b/lib/pages/calendar_overview_page.dart
index fa4c16f..939fcb4 100644
--- a/lib/pages/calendar_overview_page.dart
+++ b/lib/pages/calendar_overview_page.dart
@@ -4,6 +4,7 @@ import 'package:flutter/material.dart';
 import '../models/omni_note.dart';
 import '../services/omni_note_service.dart';
 import 'note_detail_page.dart';
+import '../widgets/main_menu_drawer.dart';
 
 enum CalView { day, week, month, year }
 
@@ -100,6 +101,7 @@ class _CalendarOverviewPageState extends State<CalendarOverviewPage> {
     }[_view]!;
 
     return Scaffold(
+      drawer: const MainMenuDrawer(),
       appBar: AppBar(
         title: const Text('Calendar'),
       ),
diff --git a/lib/pages/journal_page.dart b/lib/pages/journal_page.dart
index e77a9ff..6f4f4d4 100644
--- a/lib/pages/journal_page.dart
+++ b/lib/pages/journal_page.dart
@@ -9,6 +9,7 @@ import '../models/attachment.dart';
 import '../services/omni_note_service.dart';
 import 'note_detail_page.dart';
 import 'calendar_overview_page.dart';
+import '../widgets/main_menu_drawer.dart';
 
 /// JournalPage shows **all** notes, either as a ListTile or in a 2-column grid.
 class JournalPage extends StatefulWidget {
@@ -55,6 +56,7 @@ class _JournalPageState extends State<JournalPage> {
     final notes = _displayedNotes;
 
     return Scaffold(
+      drawer: const MainMenuDrawer(),
       appBar: AppBar(
         title: const Text('Journal'),
         actions: [
@@ -246,9 +248,7 @@ class _JournalPageState extends State<JournalPage> {
   }
 }
 
-/// ────────────────────────────────────────────────────────────────────────────
-/// A small “card” for the grid view.
-/// ────────────────────────────────────────────────────────────────────────────
+/// Small card for grid view.
 class _NoteCard extends StatelessWidget {
   final OmniNote note;
   final VoidCallback onTap;
@@ -326,9 +326,7 @@ class _NoteCard extends StatelessWidget {
   }
 }
 
-/// ────────────────────────────────────────────────────────────────────────────
-/// A simple ListTile for the list view.
-/// ────────────────────────────────────────────────────────────────────────────
+/// Simple tile for list view.
 class _NoteListTile extends StatelessWidget {
   final OmniNote note;
   final VoidCallback onTap;
@@ -374,9 +372,6 @@ class _NoteListTile extends StatelessWidget {
   }
 }
 
-/// ────────────────────────────────────────────────────────────────────────────
-/// A SearchDelegate that calls `onSearch(query)`.
-/// ────────────────────────────────────────────────────────────────────────────
 class _NoteSearchDelegate extends SearchDelegate<void> {
   final Future<void> Function(String) onSearch;
   final String initial;
diff --git a/lib/pages/note_detail_page.dart b/lib/pages/note_detail_page.dart
index fb93e26..66fdef0 100644
--- a/lib/pages/note_detail_page.dart
+++ b/lib/pages/note_detail_page.dart
@@ -1,5 +1,3 @@
-// lib/pages/note_detail_page.dart
-
 import 'dart:io';
 
 import 'package:flutter/material.dart';
@@ -97,19 +95,28 @@ class _NoteDetailPageState extends State<NoteDetailPage> {
   Future<bool> _req(Permission p) async =>
       (await p.request()) == PermissionStatus.granted;
 
+  Future<Directory> _notesDir() async {
+    final dir = await getApplicationDocumentsDirectory();
+    final notes = Directory('${dir.path}/notes');
+    if (!await notes.exists()) {
+      await notes.create(recursive: true);
+    }
+    return notes;
+  }
+
   // ─── Image ────────────────────────────────────────────────────────────────
   Future<void> _pickImage() async {
     if (!await _req(Permission.camera)) return;
     final img = await ImagePicker().pickImage(source: ImageSource.camera);
     if (img == null) return;
-    final dir = await getApplicationDocumentsDirectory();
+    final dir = await _notesDir();
     final f = await File(img.path).copy(
-      '${dir.path}/notes/img_${DateTime.now().millisecondsSinceEpoch}.jpg',
+      '${dir.path}/img_${DateTime.now().millisecondsSinceEpoch}.jpg',
     );
     setState(() => _imageFile = f);
   }
 
-  // ─── Video ────────────────────────────────────────────────────────────────
+  // ─── Video ───────────────────────────────────────────────────────────────
   Future<void> _pickVideo() async {
     if (!await _req(Permission.camera) ||
         !await _req(Permission.microphone)) return;
@@ -118,9 +125,9 @@ class _NoteDetailPageState extends State<NoteDetailPage> {
       maxDuration: const Duration(minutes: 3),
     );
     if (vid == null) return;
-    final dir = await getApplicationDocumentsDirectory();
+    final dir = await _notesDir();
     final f = await File(vid.path).copy(
-      '${dir.path}/notes/vid_${DateTime.now().millisecondsSinceEpoch}.mp4',
+      '${dir.path}/vid_${DateTime.now().millisecondsSinceEpoch}.mp4',
     );
     setState(() => _videoFile = f);
   }
@@ -135,9 +142,8 @@ class _NoteDetailPageState extends State<NoteDetailPage> {
       });
     } else {
       if (!await _req(Permission.microphone)) return;
-      final dir = await getApplicationDocumentsDirectory();
-      final p =
-          '${dir.path}/notes/audio_${DateTime.now().millisecondsSinceEpoch}.m4a';
+      final dir = await _notesDir();
+      final p = '${dir.path}/audio_${DateTime.now().millisecondsSinceEpoch}.m4a';
       await _recorder.start(path: p, encoder: AudioEncoder.aacLc);
       setState(() => _isRecording = true);
     }
@@ -157,7 +163,7 @@ class _NoteDetailPageState extends State<NoteDetailPage> {
     }
   }
 
-  // ─── Save ────────────────────────────────────────────────────────────────
+  // ─── Save ───────────────────────────────────────────────────────────────
   Future<void> _save() async {
     if (!_formKey.currentState!.validate()) return;
     final svc = OmniNoteService.instance;
diff --git a/lib/pages/time_group_journal_page.dart b/lib/pages/time_group_journal_page.dart
index 0f2021f..f660464 100644
--- a/lib/pages/time_group_journal_page.dart
+++ b/lib/pages/time_group_journal_page.dart
@@ -6,6 +6,7 @@ import 'package:intl/intl.dart';
 import '../models/omni_note.dart';
 import '../services/omni_note_service.dart';
 import 'note_detail_page.dart';
+import '../widgets/main_menu_drawer.dart';
 
 class TimeGroupJournalPage extends StatefulWidget {
   const TimeGroupJournalPage({Key? key}) : super(key: key);
@@ -59,6 +60,7 @@ class _TimeGroupJournalPageState extends State<TimeGroupJournalPage> {
   @override
   Widget build(BuildContext context) {
     return Scaffold(
+      drawer: const MainMenuDrawer(),
       appBar: AppBar(title: const Text('Time-Grouped Journal')),
       body: _isLoading
           ? const Center(child: CircularProgressIndicator())
